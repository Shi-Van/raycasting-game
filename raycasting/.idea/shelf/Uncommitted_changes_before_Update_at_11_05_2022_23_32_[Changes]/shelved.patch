Index: snake_quest.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame\r\nfrom random import randrange\r\nfrom settings import HALF_HEIGHT, HALF_WIDTH\r\n\r\nRES = 700\r\nSIZE = 50\r\nsnake_speed = 10\r\npygame.init()\r\nsurface = pygame.Surface((RES, RES))\r\naim = 10\r\nclock = pygame.time.Clock()\r\nfps = 60\r\nfont_score = pygame.font.SysFont('Arial', 26, bold=True)\r\nfont_end = pygame.font.SysFont('Arial', 65, bold=True)\r\nimg = pygame.image.load(\"data\\img1.png\")\r\nimg = pygame.transform.scale(img, (50, 50))\r\nimg2 = pygame.image.load(\"data\\_cr01mQK8.jpg\")\r\nimg2 = pygame.transform.scale(img2, (50, 50))\r\nimg3 = pygame.image.load(\"data\\img3.png\")\r\nimg3 = pygame.transform.scale(img3, (40, 40))\r\nimg4 = pygame.image.load(\"data\\Visual_Night.jpg\")\r\nimg4 = pygame.transform.scale(img4, (RES, RES))\r\n\r\n\r\ndef close_game(sc):\r\n    global score, max_score\r\n    for event in pygame.event.get():\r\n        if event.type == pygame.KEYDOWN:\r\n            if event.key == pygame.K_SPACE:\r\n                if score > max_score:\r\n                    with open('data\\max_score.txt', 'w') as fin:\r\n                        print(str(score), file=fin)\r\n                snake_game(sc)\r\n\r\n\r\ndef next_key():\r\n    global dx, dy, dirs\r\n    key = pygame.key.get_pressed()\r\n    if key[pygame.K_w]:\r\n        if dirs['W']:\r\n            dx, dy = 0, -1\r\n            dirs = {'W': True, 'S': False, 'A': True, 'D': True, }\r\n    elif key[pygame.K_s]:\r\n        if dirs['S']:\r\n            dx, dy = 0, 1\r\n            dirs = {'W': False, 'S': True, 'A': True, 'D': True, }\r\n    elif key[pygame.K_a]:\r\n        if dirs['A']:\r\n            dx, dy = -1, 0\r\n            dirs = {'W': True, 'S': True, 'A': True, 'D': False, }\r\n    elif key[pygame.K_d]:\r\n        if dirs['D']:\r\n            dx, dy = 1, 0\r\n            dirs = {'W': True, 'S': True, 'A': False, 'D': True, }\r\n\r\n\r\ndef render_image(snake, apple):\r\n    surface.blit(img4, (0, 0))\r\n    render_max_score = font_score.render(f'рекорд: {max_score}', 1, pygame.Color('blue'))\r\n    surface.blit(render_max_score, (5, 30))\r\n    render_score = font_score.render(f'Украдено хекстеков: {score}', 1, (139, 0, 255))\r\n    surface.blit(render_score, (5, 5))\r\n    [surface.blit(img3, (i + 5, j + 5)) for i, j in snake[:-1]]\r\n    surface.blit(img2, snake[-1])\r\n    surface.blit(img, apple)\r\n\r\n\r\ndef snake_game(sc):\r\n    global score, max_score\r\n    global dx, dy, dirs\r\n    x, y = randrange(SIZE, RES - SIZE, SIZE), randrange(SIZE, RES - SIZE, SIZE)\r\n    apple = randrange(SIZE, RES - SIZE, SIZE), randrange(SIZE, RES - SIZE, SIZE)\r\n    length = 1\r\n    snake = [(x, y)]\r\n    with open('data\\max_score.txt', 'r') as fin:\r\n        max_score = int(fin.read())\r\n    score = 0\r\n    speed_count = 0\r\n    dx, dy = 0, 0\r\n    dirs = {'W': True, 'S': True, 'A': True, 'D': True}\r\n\r\n    while True:\r\n        if score == aim:\r\n            return True\r\n\r\n        render_image(snake, apple)\r\n\r\n        speed_count += 1\r\n        if not speed_count % snake_speed:\r\n            x = (x + dx * SIZE)\r\n            y = (y + dy * SIZE)\r\n            snake.append((x, y))\r\n            snake = snake[-length:]\r\n\r\n        if snake[-1] == apple:\r\n            apple = randrange(SIZE, RES - SIZE, SIZE), randrange(SIZE, RES - SIZE, SIZE)\r\n            length += 1\r\n            score += 1\r\n\r\n        if x < 0 or x > RES - SIZE or y > RES - SIZE or y < 0 or len(snake) != len(set(snake)):\r\n            while True:\r\n                render_end = font_end.render('GAME OVER', True, pygame.Color('blue'))\r\n                render_p = font_score.render('нажмите пробел для перезапуска', 1, (139, 0, 255))\r\n                surface.blit(render_end, (RES // 2 - 200, RES // 3))\r\n                surface.blit(render_p, (RES // 2 - 200, RES // 3 + 100))\r\n                pygame.display.flip()\r\n                close_game(sc)\r\n\r\n        pygame.display.flip()\r\n        next_key()\r\n        sc.blit(surface, (HALF_WIDTH - (RES // 2), HALF_HEIGHT - (RES // 2)))\r\n        clock.tick(fps)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/snake_quest.py b/snake_quest.py
--- a/snake_quest.py	(revision e5ef7c2fb4a4b641d216fbd93aeb5abd8263fd24)
+++ b/snake_quest.py	(date 1652298861090)
@@ -1,6 +1,6 @@
 import pygame
 from random import randrange
-from settings import HALF_HEIGHT, HALF_WIDTH
+from settings import HALF_HEIGHT, HALF_WIDTH, WIDTH, HEIGHT
 
 RES = 700
 SIZE = 50
@@ -23,13 +23,12 @@
 
 
 def close_game(sc):
-    global score, max_score
+    global score
     for event in pygame.event.get():
+        if event.type == pygame.QUIT:
+            exit()
         if event.type == pygame.KEYDOWN:
             if event.key == pygame.K_SPACE:
-                if score > max_score:
-                    with open('data\max_score.txt', 'w') as fin:
-                        print(str(score), file=fin)
                 snake_game(sc)
 
 
@@ -56,8 +55,6 @@
 
 def render_image(snake, apple):
     surface.blit(img4, (0, 0))
-    render_max_score = font_score.render(f'рекорд: {max_score}', 1, pygame.Color('blue'))
-    surface.blit(render_max_score, (5, 30))
     render_score = font_score.render(f'Украдено хекстеков: {score}', 1, (139, 0, 255))
     surface.blit(render_score, (5, 5))
     [surface.blit(img3, (i + 5, j + 5)) for i, j in snake[:-1]]
@@ -65,21 +62,23 @@
     surface.blit(img, apple)
 
 
-def snake_game(sc):
-    global score, max_score
+def snake_game(screen):
+    global score
+    # global aim
     global dx, dy, dirs
     x, y = randrange(SIZE, RES - SIZE, SIZE), randrange(SIZE, RES - SIZE, SIZE)
     apple = randrange(SIZE, RES - SIZE, SIZE), randrange(SIZE, RES - SIZE, SIZE)
     length = 1
     snake = [(x, y)]
-    with open('data\max_score.txt', 'r') as fin:
-        max_score = int(fin.read())
     score = 0
     speed_count = 0
     dx, dy = 0, 0
     dirs = {'W': True, 'S': True, 'A': True, 'D': True}
 
     while True:
+        for event in pygame.event.get():
+            if event.type == pygame.QUIT:
+                exit()
         if score == aim:
             return True
 
@@ -103,10 +102,17 @@
                 render_p = font_score.render('нажмите пробел для перезапуска', 1, (139, 0, 255))
                 surface.blit(render_end, (RES // 2 - 200, RES // 3))
                 surface.blit(render_p, (RES // 2 - 200, RES // 3 + 100))
+                screen.blit(surface, (HALF_WIDTH - (RES // 2), HALF_HEIGHT - (RES // 2)))
                 pygame.display.flip()
-                close_game(sc)
+                close_game(screen)
 
+        screen.blit(surface, (HALF_WIDTH - (RES // 2), HALF_HEIGHT - (RES // 2)))
         pygame.display.flip()
+        print(1)
+        clock.tick(fps)
         next_key()
-        sc.blit(surface, (HALF_WIDTH - (RES // 2), HALF_HEIGHT - (RES // 2)))
-        clock.tick(fps)
+
+
+if __name__ == '__main__':
+    sc = pygame.display.set_mode((WIDTH, HEIGHT), pygame.FULLSCREEN)
+    snake_game(sc)
\ No newline at end of file
